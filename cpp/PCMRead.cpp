/* PCMRead.cpp
   Copyright (C) 2021 by Bjoern Erlach. 

   The PCMRead plugin is a audio buffer reader with a novel interpolation method.
   It uses an 8-sample wide interpolator with coefficients that were created by
   using an Adam optimizer to mimimize the difference in spectral rolloff for
   all fractional sample positions.  The interpolator is followed by a fixed
   filter (coefficients were also optimized with Adam) to create a nearly
   flat response up to about 16 kHz (assuming 44100 sample rate).
   Especially for sounds with high frequency content this method leads to
   audibly less modulation/aliasing artefacts when the playback rate is variable.
*/

#include <SC_PlugIn.h>
#include <SC_InterfaceTable.h>
#include <math.h>
#include <stdio.h>

float coefs[][8] = {
{ -0.008513397537172, -0.029664440080523, 0.227573886513710, 0.621289789676666, 0.227573886513710, -0.029664440080523, -0.008513397537172, 0.000000000000000 },
{ -0.008119014091790, -0.030611732974648, 0.223007291555405, 0.621452331542969, 0.231654375791550, -0.028423046693206, -0.008925801143050, -0.000034621018131 },
{ -0.007679203525186, -0.031682301312685, 0.218686148524284, 0.621350467205048, 0.236010715365410, -0.027322310954332, -0.009297310374677, -0.000066646360210 },
{ -0.007245794404298, -0.032696623355150, 0.214336559176445, 0.621195256710052, 0.240369334816933, -0.026184154674411, -0.009678590111434, -0.000096186551673 },
{ -0.006819976028055, -0.033653393387794, 0.209957227110863, 0.620987355709076, 0.244729310274124, -0.025008805096149, -0.010069588199258, -0.000123387450003 },
{ -0.006401474121958, -0.034552026540041, 0.205550521612167, 0.620723664760590, 0.249093204736710, -0.023797145113349, -0.010468788444996, -0.000148361199535 },
{ -0.005992015823722, -0.035391364246607, 0.201115086674690, 0.620405018329620, 0.253460049629211, -0.022549610584974, -0.010876564309001, -0.000171313397004 },
{ -0.005591549910605, -0.036170911043882, 0.196651935577393, 0.620030224323273, 0.257831186056137, -0.021267317235470, -0.011291529983282, -0.000192388019059 },
{ -0.005201190244406, -0.036889463663101, 0.192161440849304, 0.619597971439362, 0.262207180261612, -0.019950663670897, -0.011713326908648, -0.000211811100598 },
{ -0.004821616224945, -0.037547141313553, 0.187644973397255, 0.619106054306030, 0.266589581966400, -0.018601318821311, -0.012141264043748, -0.000229798984947 },
{ -0.004453344270587, -0.038142520934343, 0.183102741837502, 0.618554115295410, 0.270978927612305, -0.017219640314579, -0.012574242427945, -0.000246583105763 },
{ -0.004097057972103, -0.038674879819155, 0.178534895181656, 0.617941439151764, 0.275375694036484, -0.015806753188372, -0.013011332601309, -0.000262422516244 },
{ -0.003750349860638, -0.039143513888121, 0.173942700028419, 0.617266058921814, 0.279781371355057, -0.014364220201969, -0.013448511250317, -0.000277229701169 },
{ -0.003405938390642, -0.039584591984749, 0.169324174523354, 0.616524875164032, 0.284201055765152, -0.012930868193507, -0.013883946463466, -0.000289791729301 },
{ -0.003081605304033, -0.039930745959282, 0.164688661694527, 0.615715622901917, 0.288631707429886, -0.011438881978393, -0.014321334660053, -0.000303150503896 },
{ -0.002774245338514, -0.040207117795944, 0.160032317042351, 0.614839136600494, 0.293074488639832, -0.009916104376316, -0.014759982004762, -0.000317030528095 },
{ -0.002478508744389, -0.040419302880764, 0.155358433723450, 0.613890588283539, 0.297533631324768, -0.008370611816645, -0.015194039791822, -0.000330826384015 },
{ -0.002198882400990, -0.040585827082396, 0.150665342807770, 0.612868368625641, 0.302011966705322, -0.006821688264608, -0.015630692243576, -0.000345291860867 },
{ -0.001935457810760, -0.040680553764105, 0.145957022905350, 0.611771464347839, 0.306508302688599, -0.005246154963970, -0.016062058508396, -0.000361016485840 },
{ -0.001667990582064, -0.040720455348492, 0.141235858201981, 0.610593378543854, 0.311029911041260, -0.003667127341032, -0.016471611335874, -0.000373983115423 },
{ -0.001443409826607, -0.040718689560890, 0.136581480503082, 0.609345614910126, 0.315652906894684, -0.002063300460577, -0.016906844452024, -0.000394052942283 },
{ -0.001241780817509, -0.040655992925167, 0.131888419389725, 0.608006536960602, 0.320272862911224, -0.000453453511000, -0.017340460792184, -0.000417920877226 },
{ -0.001023176591843, -0.040545873343945, 0.127171695232391, 0.606580555438995, 0.324914455413818, 0.001139115542173, -0.017738344147801, -0.000436261994764 },
{ -0.000813039019704, -0.040376525372267, 0.122451372444630, 0.605062842369080, 0.329590260982513, 0.002735104411840, -0.018119152635336, -0.000454780180007 },
{ -0.000645406078547, -0.040113300085068, 0.117750480771065, 0.603391647338867, 0.334283947944641, 0.004381019622087, -0.018498823046684, -0.000483098032419 },
{ -0.000507242511958, -0.039775703102350, 0.113052003085613, 0.601629197597504, 0.339009106159210, 0.006046187132597, -0.018868681043386, -0.000518676650245 },
{ -0.000386357773095, -0.039380878210068, 0.108369991183281, 0.599751114845276, 0.343776524066925, 0.007713951170444, -0.019221365451813, -0.000558635569178 },
{ -0.000281664077193, -0.038929812610149, 0.103677056729794, 0.597803950309753, 0.348584204912186, 0.009368512779474, -0.019554130733013, -0.000602926302236 },
{ -0.000199642963707, -0.038409627974033, 0.098998695611954, 0.595734596252441, 0.353428781032562, 0.011029131710529, -0.019864354282618, -0.000654177623801 },
{ -0.000138718169183, -0.037839796394110, 0.094341233372688, 0.593560039997101, 0.358331263065338, 0.012678246945143, -0.020156173035502, -0.000712480978109 },
{ -0.000095016788691, -0.037221770733595, 0.089716270565987, 0.591256618499756, 0.363293290138245, 0.014315072447062, -0.020424380898476, -0.000777073088102 },
{ -0.000069126021117, -0.036523267626762, 0.085037954151630, 0.588930130004883, 0.368290305137634, 0.015919856727123, -0.020652174949646, -0.000848239869811 },
{ -0.000103226862848, -0.035765107721090, 0.080478206276894, 0.586359679698944, 0.373348534107208, 0.017569746822119, -0.020877134054899, -0.000944226048887 },
{ -0.000146735925227, -0.034938685595989, 0.075971901416779, 0.583602786064148, 0.378448724746704, 0.019216433167458, -0.021050240844488, -0.001045941840857 },
{ -0.000152907334268, -0.034089323133230, 0.071456067264080, 0.580680429935455, 0.383585155010223, 0.020769059658051, -0.021157834678888, -0.001132722245529 },
{ -0.000211670529097, -0.033266834914684, 0.067109860479832, 0.577629208564758, 0.388906687498093, 0.022325128316879, -0.021293414756656, -0.001245301216841 },
{ -0.000268818810582, -0.032416932284832, 0.062839955091476, 0.574407696723938, 0.394313871860504, 0.023849900811911, -0.021385692059994, -0.001359365996905 },
{ -0.000350749585778, -0.031552173197269, 0.058653496205807, 0.571011722087860, 0.399807095527649, 0.025348234921694, -0.021458841860294, -0.001488078152761 },
{ -0.000415665097535, -0.030673166736960, 0.054556153714657, 0.567430019378662, 0.405393540859222, 0.026803106069565, -0.021482354030013, -0.001610835781321 },
{ -0.000488501507789, -0.029793336987495, 0.050551775842905, 0.563661158084869, 0.411072582006454, 0.028218001127243, -0.021480858325958, -0.001740308478475 },
{ -0.000566410366446, -0.028916640207171, 0.046669777482748, 0.559685170650482, 0.416848599910736, 0.029607310891151, -0.021453183144331, -0.001875506248325 },
{ -0.000654146540910, -0.028031675145030, 0.042893648147583, 0.555519580841064, 0.422714024782181, 0.030969254672527, -0.021394003182650, -0.002019147388637 },
{ -0.000747160520405, -0.027148803696036, 0.039271291345358, 0.551132798194885, 0.428673952817917, 0.032327469438314, -0.021304067224264, -0.002169462386519 },
{ -0.000870318617672, -0.026275640353560, 0.035788107663393, 0.546537697315216, 0.434717595577240, 0.033680725842714, -0.021200848743320, -0.002342877676710 },
{ -0.001014889217913, -0.025405319407582, 0.032442282885313, 0.541701018810272, 0.440811544656754, 0.035026527941227, -0.021071057766676, -0.002535542473197 },
{ -0.001214396674186, -0.024459604173899, 0.029226463288069, 0.536620616912842, 0.446903079748154, 0.036402534693480, -0.020866967737675, -0.002768815727904 },
{ -0.001431994838640, -0.023575760424137, 0.026207163929939, 0.531389951705933, 0.453148782253265, 0.037789609283209, -0.020664960145950, -0.003026606515050 },
{ -0.001591664273292, -0.022726317867637, 0.023202463984489, 0.526106953620911, 0.459573268890381, 0.039038330316544, -0.020423233509064, -0.003252952359617 },
{ -0.001684718299657, -0.021963788196445, 0.020337644964457, 0.520560443401337, 0.466066390275955, 0.040222045034170, -0.020182147622108, -0.003440163563937 }
};


static InterfaceTable *ft;

struct PCMRead : public Unit
{
    SndBuf *m_buf;
    float m_fbufnum;
};


#define CHECK_BUF                               \
    if (!bufData) {                             \
        unit->mDone = true;                     \
        ClearUnitOutputs(unit, inNumSamples);   \
        return;                                 \
    }


extern "C"  {

    void load(InterfaceTable *inTable);
    int api_version(void);

    void PCMRead_Ctor(PCMRead *unit);
    void PCMRead_next(PCMRead *unit, int inNumSamples);
}


int api_version(void) 
{ 
    return sc_api_version; 
}


void
PCMRead_Ctor (PCMRead *unit)
{
    unit->m_fbufnum = -1.f;
    SETCALC(PCMRead_next);
    ZOUT0(0) = 0.f;
}


void
PCMRead_next (PCMRead *unit, int inNumSamples)
{
    float *out = ZOUT(0);
    float *phsin = ZIN(1);
    int maxpos;

    SIMPLE_GET_BUF;
    float *bufData = buf->data;
    int bufFrames = buf->frames;
    CHECK_BUF;
    maxpos = bufFrames-5;
  
    LOOP(inNumSamples, 
         float val;
         float phs = ZXP(phsin);
         int pos = (int) phs;
         float frac = phs - (float) pos;
         int reverse;
         int tabselect;
         float vec1[4];
         float vec2[4];

         if (frac <= 0.5f) {
             reverse = 0;
             tabselect = lrintf(frac * 96);
         } else {
             reverse = 1;
             tabselect = lrintf((1.0f-frac) * 96);
         }

         if (pos > maxpos) {
             // b-4-3
             int n = 0;
             vec2[0] = 0.f;
             vec2[1] = 0.f;
             vec2[2] = 0.f;
             vec2[3] = 0.f;
             for (int k = pos-3; k<=maxpos; k++, n++) {
                 vec1[n] = bufData[k];
             }
             while (n<4) {
                 vec1[n] = 0.f;
                 n++;
             }
         } else {
             switch(pos) {
             case 0: {
                 vec1[0] = 0.f;
                 vec1[1] = 0.f;
                 vec1[2] = 0.f;
                 vec1[3] = bufData[0];
             }
                 break;
             case 1: {
                 vec1[0] = 0.f;
                 vec1[1] = 0.f;
                 vec1[2] = bufData[0];
                 vec1[3] = bufData[1];
             }
                 break;
             case 2: {
                 vec1[0] = 0.f;
                 vec1[1] = bufData[0];
                 vec1[2] = bufData[1];
                 vec1[3] = bufData[2];
             }
                 break;
             default: {
                 vec1[0] = bufData[pos-3];
                 vec1[1] = bufData[pos-2];
                 vec1[2] = bufData[pos-1];
                 vec1[3] = bufData[pos];
             }
             }
             vec2[0] = bufData[pos+1];
             vec2[1] = bufData[pos+2];
             vec2[2] = bufData[pos+3];
             vec2[3] = bufData[pos+4];
         }
         if (reverse) {
             val = 
                 coefs[tabselect][7] * vec1[0] +
                 coefs[tabselect][6] * vec1[1] +
                 coefs[tabselect][5] * vec1[2] +
                 coefs[tabselect][4] * vec1[3] +
                 coefs[tabselect][3] * vec2[0] +
                 coefs[tabselect][2] * vec2[1] +
                 coefs[tabselect][1] * vec2[2] +
                 coefs[tabselect][0] * vec2[3];
         } else {
             val = 
                 coefs[tabselect][0] * vec1[0] +
                 coefs[tabselect][1] * vec1[1] +
                 coefs[tabselect][2] * vec1[2] +
                 coefs[tabselect][3] * vec1[3] +
                 coefs[tabselect][4] * vec2[0] +
                 coefs[tabselect][5] * vec2[1] +
                 coefs[tabselect][6] * vec2[2] +
                 coefs[tabselect][7] * vec2[3];
         }

         ZXP(out) = val;
         );
}
////////////////////////////////////////////////////////////////////////////


void
load(InterfaceTable *inTable)
{
    ft = inTable;
    DefineSimpleUnit(PCMRead);
}


